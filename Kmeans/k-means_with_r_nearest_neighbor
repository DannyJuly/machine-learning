import numpy as np
import matplotlib.pyplot as plt
from __future__ import division

##flexible version of k-means in the transformed space
def disEclud(a,b):
    return np.sqrt(sum(np.power(a-b,2)))  #the distance between two data point

# r-nearest neighbor graph induced on the given data there is an edge between xi and xj if xj is 
# one of the r closest neighbors of datapoint xi.
#data belongs to the same cluster if they are connected with a "path", no matter how far away or form odd shapes

def flexKmeans(data,r):   
    n = np.shape(data)[0]
    neardata = list()
    cluster = 1
    labels = np.zeros((n))
    for i in range(n):
        dist = np.zeros((n))
        for j in range(n):
            dist[j] = disEclud(data[i],data[j])
        nearj = np.argsort(dist)+1                 #find the index of r data with minimum distance
        neardata.append(nearj[0:r+1])    
    for k in range(n):
        for l in range(n):
            if k==l or (neardata[k]==0).all() or (neardata[l]==0).all():
                continue
            else:
                union = np.unique(np.hstack((neardata[k],neardata[l])))  #combine two set
                length = np.size(neardata[k])+np.size(neardata[l])
                if length > np.size(union):  #see if they have same element
                    neardata[k]=union
                    neardata[l]=np.array([0,0,0])
    group = [i for i in neardata if (i!=0).all()] 
    for i in group:
        labels[i-1] = cluster
        cluster += 1
    return labels
